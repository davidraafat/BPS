{"remainingRequest":"D:\\Outlook\\Github\\BPS\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Outlook\\Github\\BPS\\src\\pages\\Index.vue?vue&type=template&id=5bc0bbef&scoped=true","dependencies":[{"path":"D:\\Outlook\\Github\\BPS\\src\\pages\\Index.vue","mtime":1741480283564},{"path":"D:\\Outlook\\Github\\BPS\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\Outlook\\Github\\BPS\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\Outlook\\Github\\BPS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Outlook\\Github\\BPS\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXY+CiAgPGEgaHJlZj0iaHR0cHM6Ly9hcGkud2hhdHNhcHAuY29tL3NlbmQ/cGhvbmU9MjAxMjA1OTk5NDM0IiB0YXJnZXQ9Il9ibGFuayIKICAgIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgZmxvYXRpbmctYnRuIj4KICAgIDxpIGNsYXNzPSJmYWIgZmEtd2hhdHNhcHAiIHN0eWxlPSJmb250LXNpemU6IDI1cHg7Ij48L2k+CiAgPC9hPgogIDwhLS0gPGEgaHJlZj0ibWFpbHRvOndlYnNpdGVAc3QtZWxldmF0b3IuY29tIiB0YXJnZXQ9Il9ibGFuayIKICAgIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgZmxvYXRpbmctYnRuLTIiPgogICAgPGkgY2xhc3M9ImZhIGZhLWVudmVsb3BlIiBzdHlsZT0iZm9udC1zaXplOiAyNXB4OyI+PC9pPgogIDwvYT4gLS0+CiAgPGRpdiBjbGFzcz0icGFnZS1oZWFkZXIgY2xlYXItZmlsdGVyIiBmaWx0ZXItY29sb3I9ImJsYWNrIj4KICAgIDwhLS0gPHBhcmFsbGF4CiAgICAgIGNsYXNzPSJwYWdlLWhlYWRlci1pbWFnZSIKICAgICAgc3R5bGU9ImJhY2tncm91bmQtaW1hZ2U6dXJsKCdpbWcvYmFja2dyb3VuZC5qcGcnKTsgdHJhbnNpdGlvbjogYWxsIDZzIGVhc2Utb3V0OyIKICAgID4KICAgIDwvcGFyYWxsYXg+IC0tPgogICAgPGNhcm91c2VsLXNlY3Rpb24gY2xhc3M9InBhZ2UtaGVhZGVyLWltYWdlIHAtMCI+PC9jYXJvdXNlbC1zZWN0aW9uPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgPGRpdiBjbGFzcz0iY29udGVudC1jZW50ZXIgYnJhbmQiPgogICAgICAgIDxpbWcgY2xhc3M9Im4tbG9nbyIgc3JjPSJpbWcvbG9nby13aGl0ZS5wbmciIGFsdD0iIiAgd2lkdGg9IjI1MHB4IiBzdHlsZT0ibWF4LXdpZHRoOiAyNTBweDsgbWFyZ2luLXRvcDogNi41cmVtOyIvPgogICAgICAgIDxoMiBjbGFzcz0iaDEtc2VvIiBzdHlsZT0iZm9udC13ZWlnaHQ6IDUwMDsiPldlIHdpbGwgPC9oMj4KICAgICAgICA8aDM+U3VwcG9ydCBZT1U8L2gzPgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2PgogIDxkaXYgY2xhc3M9Im1haW4iPgogICAgPGRpdiBjbGFzcz0ic2VjdGlvbiBzZWN0aW9uLWltYWdlcyIgc3R5bGU9ImhlaWdodDogYXV0bzsiPgogICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9InJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC04IG0tNSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Imhlcm8taW1hZ2VzLWNvbnRhaW5lci0xIj4KICAgICAgICAgICAgICA8aW1nIHNyYz0iaW1nL3AxLnBuZyIgYWx0PSIiIGhlaWdodD0iMTAwJSIgLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS0gPGRpdiBjbGFzcz0iaGVyby1pbWFnZXMtY29udGFpbmVyLTEiPgogICAgICAgICAgICAgIDxpbWcgc3JjPSJpbWcvcDEucG5nIiBhbHQ9IiIgLz4KICAgICAgICAgICAgPC9kaXY+IC0tPgogICAgICAgICAgICA8IS0tIDxkaXYgY2xhc3M9Imhlcm8taW1hZ2VzLWNvbnRhaW5lci0yIj4KICAgICAgICAgICAgICA8aW1nIHNyYz0iaW1nL3AyLnBuZyIgYWx0PSIiIC8+CiAgICAgICAgICAgIDwvZGl2PiAtLT4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPCEtLSBTZWN0aW9uIEFib3V0IFVTIC0tPgogICAgPGRpdiBjbGFzcz0ic2VjdGlvbiBzZWN0aW9uLWFib3V0LXVzIj4KICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTggbWwtYXV0byBtci1hdXRvIHRleHQtY2VudGVyIj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJ0aXRsZSI+V2hvIHdlIGFyZT88L2gyPgogICAgICAgICAgICA8aDUgY2xhc3M9ImRlc2NyaXB0aW9uIHRleHQtZGFyayI+CiAgICAgICAgICAgICAgRXN0YWJsaXNoZWQgaW4gMTk5OSwgQi5QLlMgaXMgYSB0cnVzdGVkIGxlYWRlciBpbiB0aGUgY29tcHV0ZXIgYW5kIHByaW50ZXIgaW5kdXN0cnksCiAgICAgICAgICAgICAgc3BlY2lhbGl6aW5nIGluIHByb3ZpZGluZyBoaWdoLXF1YWxpdHkgcGFydHMsIGFjY2Vzc29yaWVzLCBhbmQgc2VydmljZXMgZm9yIEhQIExhc2VySmV0IAogICAgICAgICAgICAgIGFuZCBDYW5vbi1lbmdpbmUgcHJpbnRlcnMgaW4gRWd5cHQuIFdpdGggYSB0ZWFtIG9mIGhpZ2hseSBxdWFsaWZpZWQgZW5naW5lZXJzIGFuZCBrbm93bGVkZ2VhYmxlIAogICAgICAgICAgICAgIHNhbGVzIHByb2Zlc3Npb25hbHMsIHdlIHByaWRlIG91cnNlbHZlcyBvbiBkZWxpdmVyaW5nIGlubm92YXRpdmUgc29sdXRpb25zIHRoYXQgcHJpb3JpdGl6ZSBxdWFsaXR5LCAKICAgICAgICAgICAgICByZWxpYWJpbGl0eSwgYW5kIGN1c3RvbWVyIHNhdGlzZmFjdGlvbi4gQXMgYW4gYWN0aXZlIHN1cHBsaWVyIG9mIE9FTSBhbmQgcmlnb3JvdXNseSB0ZXN0ZWQgdGhpcmQtcGFydHkgCiAgICAgICAgICAgICAgY29tcG9uZW50cywgd2UgYWxzbyBvZmZlciBjb3N0LWVmZmVjdGl2ZSByZWZ1cmJpc2hlZCBzdWJhc3NlbWJsaWVzLCBjaXJjdWl0IGJvYXJkcywgYW5kIGZ1bGx5IHJlc3RvcmVkIEhQIAogICAgICAgICAgICAgIHByaW50ZXJzLiBPdXIgdXNlci1mcmllbmRseSBvbmxpbmUgY2F0YWxvZywgc2VhcmNoYWJsZSBkYXRhYmFzZSwgYW5kIGV4cGxvZGVkLXZpZXcgZGlhZ3JhbXMgZW1wb3dlciBjdXN0b21lcnMgCiAgICAgICAgICAgICAgdG8gZmluZCBleGFjdGx5IHdoYXQgdGhleSBuZWVkIGVmZmljaWVudGx5LgogICAgICAgICAgICA8L2g1PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ic2VwYXJhdG9yIHNlcGFyYXRvci1wcmltYXJ5Ij48L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJzZWN0aW9uLXN0b3J5LW92ZXJ2aWV3Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02Ij4KICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICBjbGFzcz0iaW1hZ2UtY29udGFpbmVyIGltYWdlLWxlZnQiCiAgICAgICAgICAgICAgICBzdHlsZT0iYmFja2dyb3VuZC1pbWFnZTogdXJsKCdpbWcvYmctMS5qcGcnKSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8IS0tIEZpcnN0IGltYWdlIG9uIHRoZSBsZWZ0IHNpZGUgLS0+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0iYmxvY2txdW90ZSBibG9ja3F1b3RlLXByaW1hcnkiPgogICAgICAgICAgICAgICAgICAiV2Ugd2lsbCBzdXBwb3J0IHlvdSIKICAgICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgICAgIDxiciAvPgogICAgICAgICAgICAgICAgICA8c21hbGw+LUNFTzwvc21hbGw+CiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPCEtLSBTZWNvbmQgaW1hZ2Ugb24gdGhlIGxlZnQgc2lkZSBvZiB0aGUgYXJ0aWNsZSAtLT4KICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICBjbGFzcz0iaW1hZ2UtY29udGFpbmVyIgogICAgICAgICAgICAgICAgc3R5bGU9ImJhY2tncm91bmQtaW1hZ2U6IHVybCgnaW1nL2JnLTMuanBnJykiCiAgICAgICAgICAgICAgPjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTUiPgogICAgICAgICAgICAgIDwhLS0gRmlyc3QgaW1hZ2Ugb24gdGhlIHJpZ2h0IHNpZGUsIGFib3ZlIHRoZSBhcnRpY2xlIC0tPgogICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgIGNsYXNzPSJpbWFnZS1jb250YWluZXIgaW1hZ2UtcmlnaHQiCiAgICAgICAgICAgICAgICBzdHlsZT0iYmFja2dyb3VuZC1pbWFnZTogdXJsKCdpbWcvYmctMi5qcGcnKSIKICAgICAgICAgICAgICA+PC9kaXY+CiAgICAgICAgICAgICAgPGgzPgogICAgICAgICAgICAgICAgT3VyIFZpc2lvbgogICAgICAgICAgICAgIDwvaDM+CiAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICBPdXIgdGFyZ2V0cyBhcmUgdG8gcHJvdmlkZSBoaWdoIHF1YWxpdHkgcHJvZHVjdHMgYW5kIHNlcnZpY2Ugd2l0aCB0aGUgaGlnaGVzdCBsZXZlbCBvZgogICAgICAgICAgICAgICAgYnVzaW5lc3MgaW50ZWdyaXR5IGFuZCB0aGUgbGVhc3QgY29zdHMgYW5kIFRvIFdob20gSXQgTWF5IENvbmNlcm46IGJlIHRoZSB0b3AgbGVhZGluZwogICAgICAgICAgICAgICAgY29tcGFueSBpbiBFZ3lwdCBtYXJrZXQgaW4gdGhpcyBmaWVsZC4KICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgPGgzPgogICAgICAgICAgICAgICAgT3VyIE1pc3Npb24KICAgICAgICAgICAgICA8L2gzPgogICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICA8bGk+RGVsaXZlciBleGNlbGxlbnQgdmFsdWUsIGNvbnZpbmNlLCBhbmQgcmVsaWFiaWxpdHkgdG8gb3VyIGN1c3RvbWVyLjwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaT5CdWlsZCBsb25nIGxhc3Rpbmcgc3RyYXRlZ2ljIHBhcnRuZXJzaGlwcyB3aXRoIG91ciBzdXBwbGllcnMuPC9saT4KICAgICAgICAgICAgICAgICAgPGxpPlByb3ZpZGUgZ3JlYXQgam9icyBmb3Igb3VyIGVtcGxveWVlcy48L2xpPgogICAgICAgICAgICAgICAgICA8bGk+QmUgYSByZXNwb25zaWJsZSBjb3Jwb3JhdGUgY2l0aXplbiBpbiBvdXIgc29jaWV0eS48L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgPGgzPgogICAgICAgICAgICAgICAgV2hhdCB3ZSBkbwogICAgICAgICAgICAgIDwvaDM+CiAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICBTYWxlcywgSW5zdHVsbGF0aW9uIFRlc3RpbmcgYW5kIENvbW1pc3Npb25pbmcuCiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICBNb2Rlcm5pemF0aW9uLgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgTWFpbnRlbmFuY2UuCiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICBMaWZ0IGNvbXBvbmVudCB0cmFkaW5nLgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8IS0tIFNlY3Rpb24gQWJvdXQgVVMgLS0+CiAgICA8ZGl2IGNsYXNzPSJzZWN0aW9uIHNlY3Rpb24tYWJvdXQtdXMiPgogICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIgbWwtYXV0byBtci1hdXRvIHRleHQtY2VudGVyIj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJ0aXRsZSI+V2h5IGNob29zZSBTdHJlYW1saW5lIEVsZXZhdG9yPzwvaDI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQgbWItMyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb29raWUtY2FyZCI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRpdGxlLWNhcmQiPvCfkbfigI3imYLvuI8gRXhwZXJ0aXNlICYgRXhwZXJpZW5jZTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZGVzY3JpcHRpb24tY2FyZCB0ZXh0LW11dGVkIj5PdmVyIHR3byBkZWNhZGVzIG9mIGluZHVzdHJ5IGxlYWRlcnNoaXAsIGJhY2tlZCBieSBhIHNraWxsZWQgdGVhbSBkZWRpY2F0ZWQgdG8gc29sdmluZyB5b3VyIHByaW50ZXIgbmVlZHMuPC9wPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQgbWItMyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb29raWUtY2FyZCI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRpdGxlLWNhcmQiPvCfk4ggUXVhbGl0eSBBc3N1cmFuY2U8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImRlc2NyaXB0aW9uLWNhcmQgdGV4dC1tdXRlZCI+Q2hvb3NlIGZyb20gb3JpZ2luYWwgT0VNIHBhcnRzLCBjZXJ0aWZpZWQgdGhpcmQtcGFydHkgYWx0ZXJuYXRpdmVzLCBvciBwcmVtaXVtIHJlZnVyYmlzaGVkIHByb2R1Y3Rz4oCUYWxsIHRlc3RlZCBmb3IgcGVyZm9ybWFuY2UuPC9wPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQgbWItMyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb29raWUtY2FyZCI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRpdGxlLWNhcmQiPvCfkqEgVHJ1c3RlZCBSZXB1dGF0aW9uIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZGVzY3JpcHRpb24tY2FyZCB0ZXh0LW11dGVkIj5BIGxveWFsIGN1c3RvbWVyIGJhc2UgdGhhdCByZXR1cm5zIGZvciBvdXIgY29uc2lzdGVudCByZWxpYWJpbGl0eSwgZXhjZXB0aW9uYWwgc2VydmljZSwgYW5kIGxvbmctdGVybSB2YWx1ZS4gPC9wPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ic2VwYXJhdG9yIHNlcGFyYXRvci1wcmltYXJ5Ij48L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDwhLS0gPGRpdiBjbGFzcz0ic2VjdGlvbiBzZWN0aW9uLWFib3V0LXVzIj4KICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIG1sLWF1dG8gbXItYXV0byB0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgIDxoMiBjbGFzcz0idGl0bGUiPgogICAgICAgICAgICAgIFdlIGFyZSBjZXJ0aWZpZWQgYnkgVMOcViBTw5xEIGZvciBmb2xsb3dpbmcgdGhlIElTTyA5MDAxOjIwMTUgUXVhbGl0eSBNYW5hZ2VtZW50IFN5c3RlbSAoUU1TKSBzdGFuZGFyZHMKICAgICAgICAgICAgICA8YnI+CiAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgc3JjPSJpbWcvY2VydC5wbmciCiAgICAgICAgICAgICAgICBhbHQ9IlRodW1ibmFpbCBJbWFnZSIKICAgICAgICAgICAgICAgIGNsYXNzPSJtdC0zIgogICAgICAgICAgICAgICAgc3R5bGU9ImhlaWdodDogMjAwcHg7IgogICAgICAgICAgICAgIC8+CiAgICAgICAgICAgIDwvaDI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQgbWItMyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb29raWUtY2FyZCI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRpdGxlLWNhcmQiPuKchSBXZSBhcmUgY2VydGlmaWVkIGJ5IFTDnFYgU8OcRDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZGVzY3JpcHRpb24tY2FyZCB0ZXh0LW11dGVkIj5mb3IgZm9sbG93aW5nIHRoZSBJU08gOTAwMToyMDE1IFF1YWxpdHkgTWFuYWdlbWVudCBTeXN0ZW0gKFFNUykgc3RhbmRhcmRzLiBQb3dlcmVkIGJ5IFN0cmVhbWxpbmUgRWxldmF0b3IgaXMgdGhlIHByb3VkIGF1dGhvcmlzZWQgcGFydG5lciBvZiByZXNpZGVudGlhbCBsaWZ0cyBzdXBwbGllZCBieSBUSyBBY2Nlc3MgU29sdXRpb25zIDwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00IG1iLTMiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29va2llLWNhcmQiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0aXRsZS1jYXJkIj7wn4+tIFRLIEFjY2VzcyBTb2x1dGlvbnMgTHRkLjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZGVzY3JpcHRpb24tY2FyZCB0ZXh0LW11dGVkIj5pcyBvbmUgb2YgdGhlIHdvcmxk4oCZcyBsZWFkaW5nIHN1cHBsaWVycyBvZiBzdGFpcmxpZnRzLCBob21lIGxpZnRzIGFuZCBwbGF0Zm9ybSBsaWZ0cy4gRm91bmRlZCBpbiAxOTY3LCB0aGV5IHN1cHBseSBwdWJsaWMgYW5kIHByaXZhdGUgc29sdXRpb25zIGV4Y2x1c2l2ZWx5IHRocm91Z2ggYSBuZXR3b3JrIG9mIGF1dGhvcmlzZWQgcGFydG5lcnMgYWNyb3NzIHRoZSBnbG9iZS48L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCBtYi0zIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvb2tpZS1jYXJkIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGl0bGUtY2FyZCI+8J+nkSBXaXRoIGN1c3RvbWVycyBpbiBvdmVyIDEwMCBjb3VudHJpZXMgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJkZXNjcmlwdGlvbi1jYXJkIHRleHQtbXV0ZWQiPnNlcnZlZCBieSBtb3JlIHRoYW4gNTAsMDAwIGVtcGxveWVlcywgVEsgRWxldmF0b3IgYWNoaWV2ZWQgc2FsZXMgb2YgYXJvdW5kIOKCrDggYmlsbGlvbiBpbiAyMDIwLSAyMDIxLiBUaGV5IGhhdmUgYW4gZXh0ZW5zaXZlIG5ldHdvcmsgd2l0aCBvdmVyIDEsMDAwIGxvY2F0aW9ucyB3b3JsZHdpZGUgYW5kIGd1YXJhbnRlZSBjbG9zZW5lc3MgdG8gY3VzdG9tZXJzLiA8L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJzZXBhcmF0b3Igc2VwYXJhdG9yLXByaW1hcnkiPjwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PiAtLT4KICAgIDwhLS0gU2VjdGlvbiBvZiBwcm9kdWN0cyAtLT4KICAgIDwhLS0gPGRpdiBjbGFzcz0ic2VjdGlvbiBzZWN0aW9uLXRlYW0gdGV4dC1jZW50ZXIiPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgPGgyIGNsYXNzPSJ0aXRsZSI+SGVyZSBpcyBvdXIgcHJvZHVjdHM8L2gyPgogICAgICA8ZGl2IGNsYXNzPSJ0ZWFtIj4KICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZWFtLXBsYXllciBjYXJkIiBzdHlsZT0iYm9yZGVyLXJhZGl1czogM3JlbTsiPgogICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgIHNyYz0iaW1nL3NoYWZ0LnBuZyIKICAgICAgICAgICAgICAgIGFsdD0iVGh1bWJuYWlsIEltYWdlIgogICAgICAgICAgICAgICAgY2xhc3M9ImltZy1mbHVpZCIKICAgICAgICAgICAgICAgIHN0eWxlPSJoZWlnaHQ6IDM1MHB4OyIKICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgIDxoNCBjbGFzcz0idGl0bGUiPlNoYWZ0bGVzczwvaDQ+CiAgICAgICAgICAgICAgPHAgY2xhc3M9ImNhdGVnb3J5IHRleHQtcHJpbWFyeSI+RWxldmF0b3I8L3A+CiAgICAgICAgICAgICAgPHAgY2xhc3M9ImRlc2NyaXB0aW9uIHRleHQtZGFyayI+CiAgICAgICAgICAgICAgICBJdCBpcyBhIGdyZWF0IHNvbHV0aW9uIGZvciBwZW9wbGUgd2hvIGhhdmUgZGlmZmljdWx0eSBjbGltYmluZyBzdGFpcnMuIEl0IGlzIC4uLi4KICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRvPSIvc2hhZnRsZXNzIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IGJ0bi1yb3VuZCIgc3R5bGU9IndpZHRoOiBmaXQtY29udGVudCAhaW1wb3J0YW50OyBmb250LXdlaWdodDogNDAwOyBmb250LXNpemU6IG1lZGl1bTsiCiAgICAgICAgICAgICAgICA+PGkgY2xhc3M9ImZhIGZhLWV5ZSI+IFNlZSBtb3JlPC9pCiAgICAgICAgICAgICAgPjwvcm91dGVyLWxpbms+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRlYW0tcGxheWVyIGNhcmQiIHN0eWxlPSJib3JkZXItcmFkaXVzOiAzcmVtOyI+CiAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgc3JjPSJpbWcvZWxldmF0b3ItY2FydG9vbi5wbmciCiAgICAgICAgICAgICAgICBhbHQ9IlRodW1ibmFpbCBJbWFnZSIKICAgICAgICAgICAgICAgIGNsYXNzPSJpbWctZmx1aWQiCiAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIj5Ib21lPC9oND4KICAgICAgICAgICAgICA8cCBjbGFzcz0iY2F0ZWdvcnkgdGV4dC1wcmltYXJ5Ij5FbGV2YXRvcjwvcD4KICAgICAgICAgICAgICA8cCBjbGFzcz0iZGVzY3JpcHRpb24gdGV4dC1kYXJrIj4KICAgICAgICAgICAgICAgIFdoZXRoZXIgeW91J3ZlIGRlY2lkZWQgdG8gYnVpbGQgeW91ciBkcmVhbSBob21lIG9yIGVuam95IHRoZSBmcmVlZG9tICAuLi4uCiAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0bz0iL2hvbWUiIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgYnRuLXJvdW5kIiBzdHlsZT0id2lkdGg6IGZpdC1jb250ZW50ICFpbXBvcnRhbnQ7IGZvbnQtd2VpZ2h0OiA0MDA7IGZvbnQtc2l6ZTogbWVkaXVtOyIKICAgICAgICAgICAgICAgID48aSBjbGFzcz0iZmEgZmEtZXllIj4gU2VlIG1vcmU8L2kKICAgICAgICAgICAgICA+PC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0idGVhbS1wbGF5ZXIgY2FyZCIgc3R5bGU9ImJvcmRlci1yYWRpdXM6IDNyZW07Ij4KICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICBzcmM9ImltZy9lbGV2YXRvci5wbmciCiAgICAgICAgICAgICAgICBhbHQ9IlRodW1ibmFpbCBJbWFnZSIKICAgICAgICAgICAgICAgIGNsYXNzPSJpbWctZmx1aWQiCiAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIj5QYXNzZW5nZXI8L2g0PgogICAgICAgICAgICAgIDxwIGNsYXNzPSJjYXRlZ29yeSB0ZXh0LXByaW1hcnkiPkVsZXZhdG9yPC9wPgogICAgICAgICAgICAgIDxwIGNsYXNzPSJkZXNjcmlwdGlvbiB0ZXh0LWRhcmsiPgogICAgICAgICAgICAgICAgU3RyZWFtbGluZSBFbGV2YXRvcidzIFBhc3NlbmdlciBFbGV2YXRvcnMgb2ZmZXIgc2FmZXR5LCBlZmZpY2llbmN5LCBhbmQgIC4uLi4KICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRvPSIvc2hhZnRsZXNzIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IGJ0bi1yb3VuZCIgc3R5bGU9IndpZHRoOiBmaXQtY29udGVudCAhaW1wb3J0YW50OyBmb250LXdlaWdodDogNDAwOyBmb250LXNpemU6IG1lZGl1bTsiCiAgICAgICAgICAgICAgICA+PGkgY2xhc3M9ImZhIGZhLWV5ZSI+IFNlZSBtb3JlPC9pCiAgICAgICAgICAgICAgPjwvcm91dGVyLWxpbms+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0idGVhbS1wbGF5ZXIgY2FyZCIgc3R5bGU9ImJvcmRlci1yYWRpdXM6IDNyZW07Ij4KICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICBzcmM9IkRvd25sb2Fkcy9BbHR1cmEgRGlhbW9uZC9hbHR1cmEtM2QucG5nIgogICAgICAgICAgICAgICAgYWx0PSJUaHVtYm5haWwgSW1hZ2UiCiAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWZsdWlkIG10LTMiCiAgICAgICAgICAgICAgICBzdHlsZT0iaGVpZ2h0OiAzNTBweDsiCiAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIj5BbHR1cmEgVmVydGljYWwgUGxhdGZvcm08L2g0PgogICAgICAgICAgICAgIDxwIGNsYXNzPSJjYXRlZ29yeSB0ZXh0LXByaW1hcnkiPlZQTHM8L3A+CiAgICAgICAgICAgICAgPHAgY2xhc3M9ImRlc2NyaXB0aW9uIHRleHQtZGFyayI+CiAgICAgICAgICAgICAgICBUaGUgQWx0dXJhIFBsYXRpbnVtIGh5ZHJhdWxpYyBob21lIGxpZnQgZml0cyBldmVyeXdoZXJlIC4uLi4KICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRvPSIvYWx0dXJhIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IGJ0bi1yb3VuZCIgc3R5bGU9IndpZHRoOiBmaXQtY29udGVudCAhaW1wb3J0YW50OyBmb250LXdlaWdodDogNDAwOyBmb250LXNpemU6IG1lZGl1bTsiCiAgICAgICAgICAgICAgICA+PGkgY2xhc3M9ImZhIGZhLWV5ZSI+IFNlZSBtb3JlPC9pCiAgICAgICAgICAgICAgPjwvcm91dGVyLWxpbms+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRlYW0tcGxheWVyIGNhcmQiIHN0eWxlPSJib3JkZXItcmFkaXVzOiAzcmVtOyI+CiAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgc3JjPSJEb3dubG9hZHMvSVBMIEltYWdlcyAmIFZpZGVvcy9TdXByYS0zZC5wbmciCiAgICAgICAgICAgICAgICBhbHQ9IlRodW1ibmFpbCBJbWFnZSIKICAgICAgICAgICAgICAgIGNsYXNzPSJpbWctZmx1aWQiCiAgICAgICAgICAgICAgICBzdHlsZT0iaGVpZ2h0OiAzNTBweDsiCiAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIj5TdXByYSBJbmNsaW5lIFBsYXRmb3JtcyA8L2g0PgogICAgICAgICAgICAgIDxwIGNsYXNzPSJjYXRlZ29yeSB0ZXh0LXByaW1hcnkiPklQTHM8L3A+CiAgICAgICAgICAgICAgPHAgY2xhc3M9ImRlc2NyaXB0aW9uIHRleHQtZGFyayI+CiAgICAgICAgICAgICAgICBPdXIgSW5jbGluZWQgUGxhdGZvcm0gTGlmdHMgYXJlIG1hbnVmYWN0dXJlZCB0byBtZWV0IHRoZSBuZWVkcyBvZiBjdXN0b21lcnMgd2hvICAuLi4uCiAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0bz0iL3N1cHJhIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IGJ0bi1yb3VuZCIgc3R5bGU9IndpZHRoOiBmaXQtY29udGVudCAhaW1wb3J0YW50OyBmb250LXdlaWdodDogNDAwOyBmb250LXNpemU6IG1lZGl1bTsiCiAgICAgICAgICAgICAgICA+PGkgY2xhc3M9ImZhIGZhLWV5ZSI+IFNlZSBtb3JlPC9pCiAgICAgICAgICAgICAgPjwvcm91dGVyLWxpbms+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRlYW0tcGxheWVyIGNhcmQiIHN0eWxlPSJib3JkZXItcmFkaXVzOiAzcmVtOyI+CiAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgc3JjPSJEb3dubG9hZHMvRmxvdyBYL2Zsb3ctM2QucG5nIgogICAgICAgICAgICAgICAgYWx0PSJUaHVtYm5haWwgSW1hZ2UiCiAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWZsdWlkIgogICAgICAgICAgICAgICAgc3R5bGU9ImhlaWdodDogMzUwcHg7IgogICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRsZSI+SG9tZSBHbHVpZCAmIEZsb3cgWDwvaDQ+CiAgICAgICAgICAgICAgPHAgY2xhc3M9ImNhdGVnb3J5IHRleHQtcHJpbWFyeSI+U3RhaXJsaWZ0czwvcD4KICAgICAgICAgICAgICA8cCBjbGFzcz0iZGVzY3JpcHRpb24gdGV4dC1kYXJrIj4KICAgICAgICAgICAgICAgIE91ciBtb3N0IHNwYWNlLWNvbnNjaW91cyBzdGFpcmxpZnQsIEhvbWUgZ2x1aWQgJiBGbG93IFggYXJlIGRlc2lnbmVkIHRvIGJsZW5kIGludG8geW91ciBob21lICAuLi4uCiAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0bz0iL2Zsb3ciIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgYnRuLXJvdW5kIiBzdHlsZT0id2lkdGg6IGZpdC1jb250ZW50ICFpbXBvcnRhbnQ7IGZvbnQtd2VpZ2h0OiA0MDA7IGZvbnQtc2l6ZTogbWVkaXVtOyIKICAgICAgICAgICAgICAgID48aSBjbGFzcz0iZmEgZmEtZXllIj4gU2VlIG1vcmU8L2kKICAgICAgICAgICAgICA+PC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4gLS0+CiAgICA8IS0tIFNlY3Rpb24gdG8gYWRkIC0tPgogICAgPGRpdiBjbGFzcz0ic2VjdGlvbiBzZWN0aW9uLWNvbnRhY3QtdXMgdGV4dC1jZW50ZXIiPgogICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgIDxoMiBjbGFzcz0idGl0bGUiPldhbnQgdG8ga25vdyBtb3JlPzwvaDI+CiAgICAgICAgPHAgY2xhc3M9ImRlc2NyaXB0aW9uIj5Zb3UgY2FuIGxlYXZlIHVzIGEgbWVzc2FnZS48L3A+CiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy02IHRleHQtY2VudGVyIG1sLWF1dG8gbXItYXV0byBjb2wtbWQtOCI+CiAgICAgICAgICAgIDxmZy1pbnB1dAogICAgICAgICAgICAgIGNsYXNzPSJpbnB1dC1sZyIKICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iWW91ciBOYW1lLi4uIgogICAgICAgICAgICAgIHYtbW9kZWw9ImZvcm0uTmFtZSIKICAgICAgICAgICAgICBhZGRvbi1sZWZ0LWljb249Im5vdy11aS1pY29ucyB1c2Vyc19jaXJjbGUtMDgiCiAgICAgICAgICAgID4KICAgICAgICAgICAgPC9mZy1pbnB1dD4KICAgICAgICAgICAgPGZnLWlucHV0CiAgICAgICAgICAgICAgY2xhc3M9ImlucHV0LWxnIgogICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJFbWFpbCBIZXJlLi4uIgogICAgICAgICAgICAgIHYtbW9kZWw9ImZvcm0uZW1haWwiCiAgICAgICAgICAgICAgYWRkb24tbGVmdC1pY29uPSJub3ctdWktaWNvbnMgdWktMV9lbWFpbC04NSIKICAgICAgICAgICAgPgogICAgICAgICAgICA8L2ZnLWlucHV0PgogICAgICAgICAgICA8ZmctaW5wdXQKICAgICAgICAgICAgICBjbGFzcz0iaW5wdXQtbGciCiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IlBob25lIE51bWJlci4uLiIKICAgICAgICAgICAgICB2LW1vZGVsPSJmb3JtLnBob25lIgogICAgICAgICAgICAgIGFkZG9uLWxlZnQtaWNvbj0ibm93LXVpLWljb25zIHRlY2hfaGVhZHBob25lcyIKICAgICAgICAgICAgPgogICAgICAgICAgICA8L2ZnLWlucHV0PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0YXJlYS1jb250YWluZXIiPgogICAgICAgICAgICAgIDx0ZXh0YXJlYQogICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIKICAgICAgICAgICAgICAgIG5hbWU9Im5hbWUiCiAgICAgICAgICAgICAgICByb3dzPSI0IgogICAgICAgICAgICAgICAgY29scz0iODAiCiAgICAgICAgICAgICAgICB2LW1vZGVsPSJmb3JtLm1lc3NhZ2UiCiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iVHlwZSBhIG1lc3NhZ2UuLi4iCiAgICAgICAgICAgICAgPjwvdGV4dGFyZWE+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZW5kLWJ1dHRvbiI+CiAgICAgICAgICAgICAgPG4tYnV0dG9uIHR5cGU9InByaW1hcnkiIHJvdW5kIGJsb2NrIHNpemU9ImxnIiBAY2xpY2s9IlN1Ym1pdEZvcm0iCiAgICAgICAgICAgICAgICA+U2VuZCBNZXNzYWdlPC9uLWJ1dHRvbgogICAgICAgICAgICAgID4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9kaXY+Cg=="},null]}